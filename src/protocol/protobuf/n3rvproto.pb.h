// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: n3rvproto.proto

#ifndef PROTOBUF_n3rvproto_2eproto__INCLUDED
#define PROTOBUF_n3rvproto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_n3rvproto_2eproto();
void protobuf_AssignDesc_n3rvproto_2eproto();
void protobuf_ShutdownFile_n3rvproto_2eproto();

class n3rvmessage;
class n3rvdirectory;
class n3rvnode;

// ===================================================================

class n3rvmessage : public ::google::protobuf::Message {
 public:
  n3rvmessage();
  virtual ~n3rvmessage();

  n3rvmessage(const n3rvmessage& from);

  inline n3rvmessage& operator=(const n3rvmessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const n3rvmessage& default_instance();

  void Swap(n3rvmessage* other);

  // implements Message ----------------------------------------------

  n3rvmessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const n3rvmessage& from);
  void MergeFrom(const n3rvmessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string sender = 1;
  inline bool has_sender() const;
  inline void clear_sender();
  static const int kSenderFieldNumber = 1;
  inline const ::std::string& sender() const;
  inline void set_sender(const ::std::string& value);
  inline void set_sender(const char* value);
  inline void set_sender(const char* value, size_t size);
  inline ::std::string* mutable_sender();
  inline ::std::string* release_sender();
  inline void set_allocated_sender(::std::string* sender);

  // optional string action = 2;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 2;
  inline const ::std::string& action() const;
  inline void set_action(const ::std::string& value);
  inline void set_action(const char* value);
  inline void set_action(const char* value, size_t size);
  inline ::std::string* mutable_action();
  inline ::std::string* release_action();
  inline void set_allocated_action(::std::string* action);

  // repeated string args = 3;
  inline int args_size() const;
  inline void clear_args();
  static const int kArgsFieldNumber = 3;
  inline const ::std::string& args(int index) const;
  inline ::std::string* mutable_args(int index);
  inline void set_args(int index, const ::std::string& value);
  inline void set_args(int index, const char* value);
  inline void set_args(int index, const char* value, size_t size);
  inline ::std::string* add_args();
  inline void add_args(const ::std::string& value);
  inline void add_args(const char* value);
  inline void add_args(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& args() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_args();

  // optional string payload = 4;
  inline bool has_payload() const;
  inline void clear_payload();
  static const int kPayloadFieldNumber = 4;
  inline const ::std::string& payload() const;
  inline void set_payload(const ::std::string& value);
  inline void set_payload(const char* value);
  inline void set_payload(const char* value, size_t size);
  inline ::std::string* mutable_payload();
  inline ::std::string* release_payload();
  inline void set_allocated_payload(::std::string* payload);

  // @@protoc_insertion_point(class_scope:n3rvmessage)
 private:
  inline void set_has_sender();
  inline void clear_has_sender();
  inline void set_has_action();
  inline void clear_has_action();
  inline void set_has_payload();
  inline void clear_has_payload();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* sender_;
  ::std::string* action_;
  ::google::protobuf::RepeatedPtrField< ::std::string> args_;
  ::std::string* payload_;
  friend void  protobuf_AddDesc_n3rvproto_2eproto();
  friend void protobuf_AssignDesc_n3rvproto_2eproto();
  friend void protobuf_ShutdownFile_n3rvproto_2eproto();

  void InitAsDefaultInstance();
  static n3rvmessage* default_instance_;
};
// -------------------------------------------------------------------

class n3rvdirectory : public ::google::protobuf::Message {
 public:
  n3rvdirectory();
  virtual ~n3rvdirectory();

  n3rvdirectory(const n3rvdirectory& from);

  inline n3rvdirectory& operator=(const n3rvdirectory& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const n3rvdirectory& default_instance();

  void Swap(n3rvdirectory* other);

  // implements Message ----------------------------------------------

  n3rvdirectory* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const n3rvdirectory& from);
  void MergeFrom(const n3rvdirectory& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .n3rvnode nodes = 1;
  inline int nodes_size() const;
  inline void clear_nodes();
  static const int kNodesFieldNumber = 1;
  inline const ::n3rvnode& nodes(int index) const;
  inline ::n3rvnode* mutable_nodes(int index);
  inline ::n3rvnode* add_nodes();
  inline const ::google::protobuf::RepeatedPtrField< ::n3rvnode >&
      nodes() const;
  inline ::google::protobuf::RepeatedPtrField< ::n3rvnode >*
      mutable_nodes();

  // @@protoc_insertion_point(class_scope:n3rvdirectory)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::n3rvnode > nodes_;
  friend void  protobuf_AddDesc_n3rvproto_2eproto();
  friend void protobuf_AssignDesc_n3rvproto_2eproto();
  friend void protobuf_ShutdownFile_n3rvproto_2eproto();

  void InitAsDefaultInstance();
  static n3rvdirectory* default_instance_;
};
// -------------------------------------------------------------------

class n3rvnode : public ::google::protobuf::Message {
 public:
  n3rvnode();
  virtual ~n3rvnode();

  n3rvnode(const n3rvnode& from);

  inline n3rvnode& operator=(const n3rvnode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const n3rvnode& default_instance();

  void Swap(n3rvnode* other);

  // implements Message ----------------------------------------------

  n3rvnode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const n3rvnode& from);
  void MergeFrom(const n3rvnode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string service_class = 2;
  inline bool has_service_class() const;
  inline void clear_service_class();
  static const int kServiceClassFieldNumber = 2;
  inline const ::std::string& service_class() const;
  inline void set_service_class(const ::std::string& value);
  inline void set_service_class(const char* value);
  inline void set_service_class(const char* value, size_t size);
  inline ::std::string* mutable_service_class();
  inline ::std::string* release_service_class();
  inline void set_allocated_service_class(::std::string* service_class);

  // required string ip = 3;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 3;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required int32 port = 4;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 4;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:n3rvnode)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_service_class();
  inline void clear_has_service_class();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* service_class_;
  ::std::string* ip_;
  ::google::protobuf::int32 port_;
  friend void  protobuf_AddDesc_n3rvproto_2eproto();
  friend void protobuf_AssignDesc_n3rvproto_2eproto();
  friend void protobuf_ShutdownFile_n3rvproto_2eproto();

  void InitAsDefaultInstance();
  static n3rvnode* default_instance_;
};
// ===================================================================


// ===================================================================

// n3rvmessage

// required string sender = 1;
inline bool n3rvmessage::has_sender() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void n3rvmessage::set_has_sender() {
  _has_bits_[0] |= 0x00000001u;
}
inline void n3rvmessage::clear_has_sender() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void n3rvmessage::clear_sender() {
  if (sender_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_->clear();
  }
  clear_has_sender();
}
inline const ::std::string& n3rvmessage::sender() const {
  // @@protoc_insertion_point(field_get:n3rvmessage.sender)
  return *sender_;
}
inline void n3rvmessage::set_sender(const ::std::string& value) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_ = new ::std::string;
  }
  sender_->assign(value);
  // @@protoc_insertion_point(field_set:n3rvmessage.sender)
}
inline void n3rvmessage::set_sender(const char* value) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_ = new ::std::string;
  }
  sender_->assign(value);
  // @@protoc_insertion_point(field_set_char:n3rvmessage.sender)
}
inline void n3rvmessage::set_sender(const char* value, size_t size) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_ = new ::std::string;
  }
  sender_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:n3rvmessage.sender)
}
inline ::std::string* n3rvmessage::mutable_sender() {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sender_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:n3rvmessage.sender)
  return sender_;
}
inline ::std::string* n3rvmessage::release_sender() {
  clear_has_sender();
  if (sender_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sender_;
    sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void n3rvmessage::set_allocated_sender(::std::string* sender) {
  if (sender_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sender_;
  }
  if (sender) {
    set_has_sender();
    sender_ = sender;
  } else {
    clear_has_sender();
    sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:n3rvmessage.sender)
}

// optional string action = 2;
inline bool n3rvmessage::has_action() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void n3rvmessage::set_has_action() {
  _has_bits_[0] |= 0x00000002u;
}
inline void n3rvmessage::clear_has_action() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void n3rvmessage::clear_action() {
  if (action_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    action_->clear();
  }
  clear_has_action();
}
inline const ::std::string& n3rvmessage::action() const {
  // @@protoc_insertion_point(field_get:n3rvmessage.action)
  return *action_;
}
inline void n3rvmessage::set_action(const ::std::string& value) {
  set_has_action();
  if (action_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    action_ = new ::std::string;
  }
  action_->assign(value);
  // @@protoc_insertion_point(field_set:n3rvmessage.action)
}
inline void n3rvmessage::set_action(const char* value) {
  set_has_action();
  if (action_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    action_ = new ::std::string;
  }
  action_->assign(value);
  // @@protoc_insertion_point(field_set_char:n3rvmessage.action)
}
inline void n3rvmessage::set_action(const char* value, size_t size) {
  set_has_action();
  if (action_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    action_ = new ::std::string;
  }
  action_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:n3rvmessage.action)
}
inline ::std::string* n3rvmessage::mutable_action() {
  set_has_action();
  if (action_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    action_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:n3rvmessage.action)
  return action_;
}
inline ::std::string* n3rvmessage::release_action() {
  clear_has_action();
  if (action_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = action_;
    action_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void n3rvmessage::set_allocated_action(::std::string* action) {
  if (action_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete action_;
  }
  if (action) {
    set_has_action();
    action_ = action;
  } else {
    clear_has_action();
    action_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:n3rvmessage.action)
}

// repeated string args = 3;
inline int n3rvmessage::args_size() const {
  return args_.size();
}
inline void n3rvmessage::clear_args() {
  args_.Clear();
}
inline const ::std::string& n3rvmessage::args(int index) const {
  // @@protoc_insertion_point(field_get:n3rvmessage.args)
  return args_.Get(index);
}
inline ::std::string* n3rvmessage::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:n3rvmessage.args)
  return args_.Mutable(index);
}
inline void n3rvmessage::set_args(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:n3rvmessage.args)
  args_.Mutable(index)->assign(value);
}
inline void n3rvmessage::set_args(int index, const char* value) {
  args_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:n3rvmessage.args)
}
inline void n3rvmessage::set_args(int index, const char* value, size_t size) {
  args_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:n3rvmessage.args)
}
inline ::std::string* n3rvmessage::add_args() {
  return args_.Add();
}
inline void n3rvmessage::add_args(const ::std::string& value) {
  args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:n3rvmessage.args)
}
inline void n3rvmessage::add_args(const char* value) {
  args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:n3rvmessage.args)
}
inline void n3rvmessage::add_args(const char* value, size_t size) {
  args_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:n3rvmessage.args)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
n3rvmessage::args() const {
  // @@protoc_insertion_point(field_list:n3rvmessage.args)
  return args_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
n3rvmessage::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:n3rvmessage.args)
  return &args_;
}

// optional string payload = 4;
inline bool n3rvmessage::has_payload() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void n3rvmessage::set_has_payload() {
  _has_bits_[0] |= 0x00000008u;
}
inline void n3rvmessage::clear_has_payload() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void n3rvmessage::clear_payload() {
  if (payload_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    payload_->clear();
  }
  clear_has_payload();
}
inline const ::std::string& n3rvmessage::payload() const {
  // @@protoc_insertion_point(field_get:n3rvmessage.payload)
  return *payload_;
}
inline void n3rvmessage::set_payload(const ::std::string& value) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    payload_ = new ::std::string;
  }
  payload_->assign(value);
  // @@protoc_insertion_point(field_set:n3rvmessage.payload)
}
inline void n3rvmessage::set_payload(const char* value) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    payload_ = new ::std::string;
  }
  payload_->assign(value);
  // @@protoc_insertion_point(field_set_char:n3rvmessage.payload)
}
inline void n3rvmessage::set_payload(const char* value, size_t size) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    payload_ = new ::std::string;
  }
  payload_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:n3rvmessage.payload)
}
inline ::std::string* n3rvmessage::mutable_payload() {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    payload_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:n3rvmessage.payload)
  return payload_;
}
inline ::std::string* n3rvmessage::release_payload() {
  clear_has_payload();
  if (payload_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = payload_;
    payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void n3rvmessage::set_allocated_payload(::std::string* payload) {
  if (payload_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete payload_;
  }
  if (payload) {
    set_has_payload();
    payload_ = payload;
  } else {
    clear_has_payload();
    payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:n3rvmessage.payload)
}

// -------------------------------------------------------------------

// n3rvdirectory

// repeated .n3rvnode nodes = 1;
inline int n3rvdirectory::nodes_size() const {
  return nodes_.size();
}
inline void n3rvdirectory::clear_nodes() {
  nodes_.Clear();
}
inline const ::n3rvnode& n3rvdirectory::nodes(int index) const {
  // @@protoc_insertion_point(field_get:n3rvdirectory.nodes)
  return nodes_.Get(index);
}
inline ::n3rvnode* n3rvdirectory::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:n3rvdirectory.nodes)
  return nodes_.Mutable(index);
}
inline ::n3rvnode* n3rvdirectory::add_nodes() {
  // @@protoc_insertion_point(field_add:n3rvdirectory.nodes)
  return nodes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::n3rvnode >&
n3rvdirectory::nodes() const {
  // @@protoc_insertion_point(field_list:n3rvdirectory.nodes)
  return nodes_;
}
inline ::google::protobuf::RepeatedPtrField< ::n3rvnode >*
n3rvdirectory::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:n3rvdirectory.nodes)
  return &nodes_;
}

// -------------------------------------------------------------------

// n3rvnode

// required string name = 1;
inline bool n3rvnode::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void n3rvnode::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void n3rvnode::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void n3rvnode::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& n3rvnode::name() const {
  // @@protoc_insertion_point(field_get:n3rvnode.name)
  return *name_;
}
inline void n3rvnode::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:n3rvnode.name)
}
inline void n3rvnode::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:n3rvnode.name)
}
inline void n3rvnode::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:n3rvnode.name)
}
inline ::std::string* n3rvnode::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:n3rvnode.name)
  return name_;
}
inline ::std::string* n3rvnode::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void n3rvnode::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:n3rvnode.name)
}

// required string service_class = 2;
inline bool n3rvnode::has_service_class() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void n3rvnode::set_has_service_class() {
  _has_bits_[0] |= 0x00000002u;
}
inline void n3rvnode::clear_has_service_class() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void n3rvnode::clear_service_class() {
  if (service_class_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_class_->clear();
  }
  clear_has_service_class();
}
inline const ::std::string& n3rvnode::service_class() const {
  // @@protoc_insertion_point(field_get:n3rvnode.service_class)
  return *service_class_;
}
inline void n3rvnode::set_service_class(const ::std::string& value) {
  set_has_service_class();
  if (service_class_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_class_ = new ::std::string;
  }
  service_class_->assign(value);
  // @@protoc_insertion_point(field_set:n3rvnode.service_class)
}
inline void n3rvnode::set_service_class(const char* value) {
  set_has_service_class();
  if (service_class_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_class_ = new ::std::string;
  }
  service_class_->assign(value);
  // @@protoc_insertion_point(field_set_char:n3rvnode.service_class)
}
inline void n3rvnode::set_service_class(const char* value, size_t size) {
  set_has_service_class();
  if (service_class_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_class_ = new ::std::string;
  }
  service_class_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:n3rvnode.service_class)
}
inline ::std::string* n3rvnode::mutable_service_class() {
  set_has_service_class();
  if (service_class_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    service_class_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:n3rvnode.service_class)
  return service_class_;
}
inline ::std::string* n3rvnode::release_service_class() {
  clear_has_service_class();
  if (service_class_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = service_class_;
    service_class_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void n3rvnode::set_allocated_service_class(::std::string* service_class) {
  if (service_class_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete service_class_;
  }
  if (service_class) {
    set_has_service_class();
    service_class_ = service_class;
  } else {
    clear_has_service_class();
    service_class_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:n3rvnode.service_class)
}

// required string ip = 3;
inline bool n3rvnode::has_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void n3rvnode::set_has_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void n3rvnode::clear_has_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void n3rvnode::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& n3rvnode::ip() const {
  // @@protoc_insertion_point(field_get:n3rvnode.ip)
  return *ip_;
}
inline void n3rvnode::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:n3rvnode.ip)
}
inline void n3rvnode::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:n3rvnode.ip)
}
inline void n3rvnode::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:n3rvnode.ip)
}
inline ::std::string* n3rvnode::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:n3rvnode.ip)
  return ip_;
}
inline ::std::string* n3rvnode::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void n3rvnode::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:n3rvnode.ip)
}

// required int32 port = 4;
inline bool n3rvnode::has_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void n3rvnode::set_has_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void n3rvnode::clear_has_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void n3rvnode::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 n3rvnode::port() const {
  // @@protoc_insertion_point(field_get:n3rvnode.port)
  return port_;
}
inline void n3rvnode::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:n3rvnode.port)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_n3rvproto_2eproto__INCLUDED
